/*=============================================================================================
   PL/SQL Script: clean_and_standardize_data.sql
===============================================================================================

   üí° Purpose:
   --------------------------------------------------------------------------------------------
   This script cleans and standardizes data in the `contracts` table to improve accuracy, 
   consistency, and usability for downstream processes and reporting.

   ‚ú® Features:
   --------------------------------------------------------------------------------------------
   ‚ûú Removes duplicate rows based on the `ROW_KEY` column for data integrity.
   ‚ûú Handles null and unknown values in key fields by replacing them with appropriate defaults.
   ‚ûú Standardizes date formats and resolves invalid date entries.
   ‚ûú Replaces negative monetary values with 0 for logical consistency.
   ‚ûú Normalizes text fields and phone numbers for uniformity.
   ‚ûú Ensures category descriptions are standardized for easier analysis.
   ‚ûú Implements robust error handling with progress logs using `DBMS_OUTPUT.PUT_LINE`.

   üõ†Ô∏è Execution Instructions:
   --------------------------------------------------------------------------------------------
   1Ô∏è‚É£ Save this script as `clean_and_standardize_data.sql`.
   2Ô∏è‚É£ Open Oracle SQL Developer (or another PL/SQL-compatible environment).
   3Ô∏è‚É£ Enable server output by running:
       SET SERVEROUTPUT ON;
   4Ô∏è‚É£ Execute the script.
   5Ô∏è‚É£ Review logs in the output console for:
       ‚û§ Progress updates
       ‚û§ Results of cleaning and standardization steps
       ‚û§ Any error messages

   üöÄ Optional Enhancements:
   --------------------------------------------------------------------------------------------
   ‚û§ Add Additional Data Validation:
       -- Run queries to check for specific anomalies after cleaning:
       
       SELECT COUNT(*) AS invalid_dates FROM contracts WHERE CONTRACT_DATE < TO_DATE('2000-01-01', 'YYYY-MM-DD');

   ‚û§ Create Summary Reports:
       -- Generate a summary report of changes for validation and review:
       
       SELECT 
           COUNT(*) AS total_rows, 
           COUNT(DISTINCT ROW_KEY) AS unique_rows, 
           COUNT(*) - COUNT(DISTINCT ROW_KEY) AS duplicates_removed 
       FROM contracts;

   ‚û§ Log Results into an Audit Table:
       -- Extend the script to log cleaning details into a separate audit table:
       
       CREATE TABLE data_cleaning_audit (
           log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
           action VARCHAR2(100),
           affected_rows NUMBER,
           timestamp TIMESTAMP,
           details VARCHAR2(4000)
       );

   ‚ö†Ô∏è Prerequisites:
   --------------------------------------------------------------------------------------------
   ‚öô Ensure the `contracts` table is backed up before execution.
   ‚öô Verify database permissions to alter the `contracts` table and run cleaning operations.
   ‚öô Enable `DBMS_OUTPUT` to monitor progress and results.

=============================================================================================*/

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
üü¢ BEGINNING OF SCRIPT üü¢
-----------------------------------------------------------------------------------------------
The cleaning and standardization process begins here! Transform your `contracts` table into a 
reliable and consistent dataset, ready for analysis and reporting. Execute with confidence!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

BEGIN
    -- Step 1: Remove duplicate rows based on ROW_KEY
    BEGIN
        EXECUTE IMMEDIATE '
            DELETE FROM contracts
            WHERE ROW_KEY NOT IN (
                SELECT ROW_KEY
                FROM (
                    SELECT ROW_KEY, MIN(ROW_KEY) OVER (PARTITION BY ROW_KEY) AS min_row
                    FROM contracts
                ) temp
                WHERE ROW_KEY = min_row
            )';
        DBMS_OUTPUT.PUT_LINE('Duplicate rows removed successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error removing duplicate rows: ' || SQLERRM);
    END;

    -- Step 2: Handle null values in key fields
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE contracts SET CONTRACT_SYNOPSIS = ''Not Available'' WHERE CONTRACT_SYNOPSIS IS NULL';
        DBMS_OUTPUT.PUT_LINE('Null values in CONTRACT_SYNOPSIS replaced successfully.');

        EXECUTE IMMEDIATE 'UPDATE contracts SET ALIAS_NM = ''No Alias'' WHERE ALIAS_NM IS NULL';
        DBMS_OUTPUT.PUT_LINE('Null values in ALIAS_NM replaced successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error handling null values: ' || SQLERRM);
    END;

    -- Step 3: Replace 'unknown' values in contact fields
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE contracts SET CONTRACT_CONTACT_NM = ''Unknown Name'' WHERE CONTRACT_CONTACT_NM = ''unknown''';
        EXECUTE IMMEDIATE 'UPDATE contracts SET CONTRACT_CONTACT_VOICE_PH_NO = ''Unknown Phone'' WHERE CONTRACT_CONTACT_VOICE_PH_NO = ''unknown''';
        EXECUTE IMMEDIATE 'UPDATE contracts SET CONTRACT_CONTACT_EMAIL_AD = ''Unknown Email'' WHERE CONTRACT_CONTACT_EMAIL_AD = ''unknown''';
        DBMS_OUTPUT.PUT_LINE('Unknown values in contact fields replaced successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error replacing unknown values in contact fields: ' || SQLERRM);
    END;

    -- Step 4: Standardize and handle invalid dates
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE contracts SET EFBGN_DT = TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') WHERE EFBGN_DT IS NULL OR EFBGN_DT = TO_DATE(''0000-00-00'', ''YYYY-MM-DD'')';
        EXECUTE IMMEDIATE 'UPDATE contracts SET EFEND_DT = TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') WHERE EFEND_DT IS NULL OR EFEND_DT = TO_DATE(''0000-00-00'', ''YYYY-MM-DD'')';
        EXECUTE IMMEDIATE 'UPDATE contracts SET BRD_AWD_DT = TO_DATE(''1900-01-01'', ''YYYY-MM-DD'') WHERE BRD_AWD_DT IS NULL OR BRD_AWD_DT = TO_DATE(''0000-00-00'', ''YYYY-MM-DD'')';
        DBMS_OUTPUT.PUT_LINE('Dates standardized and invalid values handled successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error handling dates: ' || SQLERRM);
    END;

    -- Step 5: Replace negative monetary values with 0
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE contracts SET MA_PRCH_LMT_AM = 0 WHERE MA_PRCH_LMT_AM < 0';
        EXECUTE IMMEDIATE 'UPDATE contracts SET MA_ITD_ORD_AM = 0 WHERE MA_ITD_ORD_AM < 0';
        DBMS_OUTPUT.PUT_LINE('Negative monetary values replaced with 0 successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error replacing negative monetary values: ' || SQLERRM);
    END;

    -- Step 6: Standardize text fields and normalize phone numbers
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE contracts SET LGL_NM = UPPER(TRIM(LGL_NM))';
        EXECUTE IMMEDIATE 'UPDATE contracts SET ALIAS_NM = UPPER(TRIM(ALIAS_NM))';
        EXECUTE IMMEDIATE '
            UPDATE contracts
            SET CONTRACT_CONTACT_VOICE_PH_NO = 
                ''('' || SUBSTR(CONTRACT_CONTACT_VOICE_PH_NO, 1, 3) || '') '' ||
                SUBSTR(CONTRACT_CONTACT_VOICE_PH_NO, 4, 3) || ''-'' ||
                SUBSTR(CONTRACT_CONTACT_VOICE_PH_NO, 7, 4)
            WHERE LENGTH(CONTRACT_CONTACT_VOICE_PH_NO) = 10';
        DBMS_OUTPUT.PUT_LINE('Text fields standardized and phone numbers normalized successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error standardizing text fields or normalizing phone numbers: ' || SQLERRM);
    END;

    -- Step 7: Normalize category descriptions
    BEGIN
        EXECUTE IMMEDIATE 'UPDATE contracts SET CAT_DSCR = ''Construction'' WHERE CAT_DSCR LIKE ''%construction%''';
        DBMS_OUTPUT.PUT_LINE('Category descriptions normalized successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error normalizing category descriptions: ' || SQLERRM);
    END;

    -- Step 8: Validation query to check for anomalies
    BEGIN
        DECLARE
            high_value_count NUMBER;
        BEGIN
            SELECT COUNT(*) INTO high_value_count FROM contracts WHERE MA_PRCH_LMT_AM > 10000000;
            DBMS_OUTPUT.PUT_LINE('Number of contracts with unusually high spending: ' || high_value_count);
        END;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error running validation query: ' || SQLERRM);
    END;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error during data cleaning: ' || SQLERRM);
END;
/