/*=============================================================================================
   PL/SQL Script: performance_optimization.sql
===============================================================================================

   üí° Purpose:
   --------------------------------------------------------------------------------------------
   This script optimizes database performance by rebuilding indexes and gathering statistics 
   for the `contracts` table. These operations improve query execution speed and overall 
   system performance.

   ‚ú® Features:
   --------------------------------------------------------------------------------------------
   ‚ûú Rebuilds existing indexes on the `contracts` table to enhance query efficiency.
   ‚ûú Gathers updated table and index statistics to support Oracle's query optimizer.
   ‚ûú Logs the execution process, including progress and results, using `DBMS_OUTPUT.PUT_LINE`.

   üõ†Ô∏è Execution Instructions:
   --------------------------------------------------------------------------------------------
   1Ô∏è‚É£ Save this script as `performance_optimization.sql`.
   2Ô∏è‚É£ Open Oracle SQL Developer (or another PL/SQL-compatible environment).
   3Ô∏è‚É£ Enable server output by running:
       SET SERVEROUTPUT ON;
   4Ô∏è‚É£ Execute the script during off-peak hours to minimize performance impact.
   5Ô∏è‚É£ Verify the optimization results by testing query performance on the `contracts` table.

   üöÄ Optional Enhancements:
   --------------------------------------------------------------------------------------------
   ‚û§ Monitor Optimization Progress:
       -- Add dynamic progress updates during the execution:
       
       DBMS_OUTPUT.PUT_LINE('Rebuilding indexes...');
       DBMS_OUTPUT.PUT_LINE('Gathering table statistics...');

   ‚û§ Automate Regular Optimization:
       -- Schedule this script for periodic execution using `DBMS_SCHEDULER`:
       
       BEGIN
           DBMS_SCHEDULER.CREATE_JOB (
               job_name        => 'performance_optimization_job',
               job_type        => 'PLSQL_BLOCK',
               job_action      => 'BEGIN EXECUTE IMMEDIATE ''@performance_optimization.sql''; END;',
               start_date      => SYSTIMESTAMP,
               repeat_interval => 'FREQ=WEEKLY; BYDAY=SAT; BYHOUR=2',
               enabled         => TRUE
           );
       END;

   ‚û§ Log Optimization Results:
       -- Store optimization logs in a custom table for auditing:
       
       CREATE TABLE optimization_log (
           log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
           operation VARCHAR2(100),
           start_time TIMESTAMP,
           end_time TIMESTAMP,
           status VARCHAR2(50)
       );

       INSERT INTO optimization_log (operation, start_time, end_time, status)
       VALUES ('Rebuild Indexes', SYSTIMESTAMP, SYSTIMESTAMP + INTERVAL '1' MINUTE, 'SUCCESS');

   ‚ö†Ô∏è Prerequisites:
   --------------------------------------------------------------------------------------------
   ‚öô Verify the database has sufficient resources to rebuild indexes.
   ‚öô Ensure that operations are performed during off-peak hours to avoid system slowdown.
   ‚öô Backup the database before performing optimization tasks for added security.

=============================================================================================*/

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
üü¢ BEGINNING OF SCRIPT üü¢
-----------------------------------------------------------------------------------------------
Maximize the performance of your database! Rebuild indexes, gather statistics, and ensure your 
`contracts` table delivers fast and efficient query results. Execute confidently and monitor logs!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

BEGIN
    -- Log the start of the optimization process
    DBMS_OUTPUT.PUT_LINE('Starting performance optimization process...');

    -- Gather table statistics
    BEGIN
        DBMS_STATS.GATHER_TABLE_STATS('SCHEMA_NAME', 'contracts');
        DBMS_OUTPUT.PUT_LINE('Table statistics gathered successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error gathering table statistics: ' || SQLERRM);
    END;

    -- Rebuild indexes
    BEGIN
        EXECUTE IMMEDIATE 'ALTER INDEX idx_row_key REBUILD';
        DBMS_OUTPUT.PUT_LINE('Index idx_row_key rebuilt successfully.');

        EXECUTE IMMEDIATE 'ALTER INDEX idx_vendor_name REBUILD';
        DBMS_OUTPUT.PUT_LINE('Index idx_vendor_name rebuilt successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error rebuilding indexes: ' || SQLERRM);
    END;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error during performance optimization: ' || SQLERRM);
END;
/