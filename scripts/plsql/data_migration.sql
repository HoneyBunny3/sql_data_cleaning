/*=============================================================================================
   PL/SQL Script: data_migration.sql
===============================================================================================

   üí° Purpose:
   --------------------------------------------------------------------------------------------
   This script migrates data from a staging table (`staging_contracts`) to the production 
   `contracts` table while ensuring no duplicate entries are introduced.

   ‚ú® Features:
   --------------------------------------------------------------------------------------------
   ‚ûú Ensures only new records are migrated by using a `NOT EXISTS` check.
   ‚ûú Implements robust error handling to provide meaningful feedback during execution.
   ‚ûú Logs progress and results with detailed execution messages via `DBMS_OUTPUT.PUT_LINE`.

   üõ†Ô∏è Execution Instructions:
   --------------------------------------------------------------------------------------------
   1Ô∏è‚É£ Save this script as `data_migration.sql`.
   2Ô∏è‚É£ Open Oracle SQL Developer (or another PL/SQL-compatible environment).
   3Ô∏è‚É£ Enable server output by running:
       SET SERVEROUTPUT ON;
   4Ô∏è‚É£ Execute the script.
   5Ô∏è‚É£ Verify the migration by:
       ‚û§ Checking the total record count in the `contracts` table:
           
           SELECT COUNT(*) FROM contracts;
           
       ‚û§ Reviewing logs for any error messages or skipped entries.

   üöÄ Optional Enhancements:
   --------------------------------------------------------------------------------------------
   ‚û§ Add Audit Logging:
       -- Track migrated records for auditing purposes:
       
       CREATE TABLE migration_audit (
           migration_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
           record_id NUMBER,
           migrated_at TIMESTAMP DEFAULT SYSDATE
       );
       INSERT INTO migration_audit (record_id)
       SELECT ROW_KEY FROM staging_contracts
       WHERE NOT EXISTS (
           SELECT 1 FROM contracts WHERE contracts.ROW_KEY = staging_contracts.ROW_KEY
       );

   ‚û§ Validate Data Before Migration:
       -- Check for anomalies in the staging data before migrating:
       
       SELECT * FROM staging_contracts WHERE CONTRACT_DATE IS NULL OR LGL_NM IS NULL;

   ‚û§ Automate the Migration Process:
       -- Schedule the script as a recurring job for regular updates:
       
       BEGIN
           DBMS_SCHEDULER.CREATE_JOB (
               job_name        => 'data_migration_job',
               job_type        => 'PLSQL_BLOCK',
               job_action      => 'BEGIN EXECUTE IMMEDIATE ''@data_migration.sql''; END;',
               start_date      => SYSTIMESTAMP,
               repeat_interval => 'FREQ=DAILY; BYHOUR=2',
               enabled         => TRUE
           );
       END;

   ‚ö†Ô∏è Prerequisites:
   --------------------------------------------------------------------------------------------
   ‚öô Ensure the `staging_contracts` table is populated and matches the structure of the 
      `contracts` table.
   ‚öô Verify database permissions to insert records into the `contracts` table.
   ‚öô Enable `DBMS_OUTPUT` to view execution logs.

=============================================================================================*/

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
üü¢ BEGINNING OF SCRIPT üü¢
-----------------------------------------------------------------------------------------------
Start the migration process! Seamlessly transfer new records from `staging_contracts` to 
`contracts` while ensuring data integrity and eliminating duplicates. Execute confidently!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

BEGIN
    -- Log the start of the migration process
    DBMS_OUTPUT.PUT_LINE('Starting data migration...');

    -- Perform the migration
    BEGIN
        INSERT INTO contracts (ROW_KEY, CONTRACT_SYNOPSIS, LGL_NM, MA_PRCH_LMT_AM, EFBGN_DT, EFEND_DT)
        SELECT ROW_KEY, CONTRACT_SYNOPSIS, LGL_NM, MA_PRCH_LMT_AM, EFBGN_DT, EFEND_DT
        FROM staging_contracts
        WHERE NOT EXISTS (
            SELECT 1 FROM contracts WHERE contracts.ROW_KEY = staging_contracts.ROW_KEY
        );
        DBMS_OUTPUT.PUT_LINE('Data migration completed successfully.');
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Error during data migration: ' || SQLERRM);
    END;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected error during the data migration process: ' || SQLERRM);
END;
/